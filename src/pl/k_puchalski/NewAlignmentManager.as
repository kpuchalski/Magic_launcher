package pl.k_puchalski{	import flash.display.*;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.geom.*;		public class NewAlignmentManager	{	  public static var L:String = 'L';	  public static var R:String  = 'R';	  public static var T:String  = 'T';	  public static var B:String  = 'B';	  public static var C:String  = 'C';	  	  public var _swfStage:Stage;	  	  private var _oCollection:Array;	  	  private var mc:MovieClip;	  	  private var ref:MovieClip;	  	  public function NewAlignmentManager (m:MovieClip,r:MovieClip = null)	  {		_oCollection = [];				this.mc = m;		this.ref = r;		_swfStage = m.stage;		_swfStage.addEventListener(Event.RESIZE, resizeDisplay);		_swfStage.align = StageAlign.TOP_LEFT;		_swfStage.scaleMode = StageScaleMode.NO_SCALE;	  }	  	  public function addElement (e : DisplayObject, hAlignment : String = 'C', vAlignment : String = 'C', xOffset:* = 0, yOffset:* = 0):void	  {		  var p:Object = new Object();		  p.mc = e;		  p.hAlignment = hAlignment;		  p.vAlignment = vAlignment;		  p.xOffset = xOffset;		  p.yOffset = yOffset;		  p.width = -1;		  p.height = -1;		  p.constr = false;		  p.fitToBox = false;		  p.fitToDim = null;		  		  this._oCollection.push(p);		  		  this._translateElement(p);	  }	  	  public function addElementAndResize (e : DisplayObject, hAlignment : String = 'C', vAlignment : String = 'C', xOffset:* = 0, yOffset:* = 0, width:* = -1, height:* = -1, constr:Boolean = false):void	  {		  var p:Object = new Object();		  p.mc = e;		  p.hAlignment = hAlignment;		  p.vAlignment = vAlignment;		  p.xOffset = xOffset;		  p.yOffset = yOffset;		  p.width = width;		  p.height = height;		  p.constr = constr;		  p.fitToBox = false;		  p.fitToDim = null;		  		  this._oCollection.push(p);		  		  this._translateElement(p);	  }	  	  public function addElementAndFitToBox (e : DisplayObject, hAlignment : String = 'C', vAlignment : String = 'C', xOffset:* = 0, yOffset:* = 0, width:* = -1, height:* = -1):void	  {		  var p:Object = new Object();		  p.mc = e;		  p.hAlignment = hAlignment;		  p.vAlignment = vAlignment;		  p.xOffset = xOffset;		  p.yOffset = yOffset;		  p.width = width;		  p.height = height;		  p.constr = false;		  p.fitToBox = true;		  p.fitToDim = null;		  		  this._oCollection.push(p);		  		  this._translateElement(p);	  }	  	  public function addElementAndFitToDim (e : DisplayObject, hAlignment : String = 'C', vAlignment : String = 'C', xOffset:* = 0, yOffset:* = 0, dim:String='H'):void	  {		  var p:Object = new Object();		  p.mc = e;		  p.hAlignment = hAlignment;		  p.vAlignment = vAlignment;		  p.xOffset = xOffset;		  p.yOffset = yOffset;		  p.width = -1;		  p.height = -1;		  p.constr = false;		  p.fitToBox = false;		  p.fitToDim = dim;		  		  this._oCollection.push(p);		  		  this._translateElement(p);	  }	  	  	  	  public function remElement (e : MovieClip) : Boolean	  {		for (var i:String in _oCollection)		{		  if (_oCollection [i]["mc"] == e)		  {			  			return Boolean (_oCollection.splice (i, 1));		  }		}		return Boolean (0);	  }	  public function resizeDisplay (event:Event):void	  {		//  trace("resizik");		for (var i:String in _oCollection)		{		  _translateElement (_oCollection [i]);		}	  }	  	  private function _translateElement(o:Object):void	  {		var sW:Number;		var sH:Number;		var tW:Number;		var tH:Number;		var nW:Number;		var nH:Number;				sW = this._swfStage.stageWidth;		sH = this._swfStage.stageHeight;				if (o.hAlignment == 'C')		{		  o.mc.x = (sW / 2) + _calculateValue (o.xOffset, sW/2);		}		else if (o.hAlignment == 'L')		{		  o.mc.x = _calculateValue (o.xOffset, sW/2);		}		else if (o.hAlignment == 'R')		{		  o.mc.x = sW + _calculateValue (o.xOffset, sW/2);		}		if (o.vAlignment == 'C')		{		  o.mc.y = (sH / 2) + _calculateValue (o.yOffset, sH/2);		}		else if (o.vAlignment == 'T')		{		  o.mc.y = _calculateValue (o.yOffset, sH/2);		}		else if (o.vAlignment == 'B')		{		  o.mc.y = sH + _calculateValue (o.yOffset, sH/2);		}				nH = _calculateValue (o.height, sH-(2*o.mc.y));				nW = _calculateValue (o.width, sW-(2*o.mc.x));				if(o.constr)		{			if(o.mc.width>=o.mc.height)			{				tH = nW/o.mc.width;				tW = nW;				tH = o.mc.height*tH;			}else{				tW = nH/o.mc.height;				tH = nH;				tW = o.mc.width*tW;			}						if(o.height==-1&&o.width==-1&&o.yOffset==0&&o.xOffset==0)			{				var nn:Number = 0;				if(sW>=sH)				{					if(o.mc.width>=o.mc.height)					{						nn = o.mc.width/o.mc.height;						o.mc.width = sW;						o.mc.height = o.mc.width/nn												if(o.mc.height<sH)						{							nn = sH/o.mc.height;							o.mc.height = sH							o.mc.width = nn*o.mc.width;						}					}				}else{					if(o.mc.width>=o.mc.height)					{						nn = o.mc.width/o.mc.height;						o.mc.height = sH;						o.mc.width = o.mc.height*nn										/*if(o.mc.height<sH)						{							nn = sH/o.mc.height;							o.mc.height = sH							o.mc.width = nn*o.mc.width;							trace(o.mc.height+' '+o.mc.width)						}*/					}				}			}						if(o.height=='100%'&&o.width=='100%'&&o.yOffset==0&&o.xOffset==0)			{				if(sW>=sH)				{					tH = sW/o.mc.width;					tW = sW;					tH = o.mc.height*tH;				}else{					tW = sH/o.mc.height;					tH = sH;					tW = o.mc.width*tW;				}			}						if(o.height!='-1')			{				o.mc.height = tH;			}						if(o.width!='-1')			{				o.mc.width = tW;			}					}else{			if(o.height!='-1')			{				if(o.height=='100%')				{					o.mc.height = sH;				}else{					o.mc.height = nH;				}			}						if(o.width!='-1')			{				if(o.width=='100%')				{					o.mc.width = sW;				}else{					o.mc.width = nW;				}			}		}				if(o.fitToBox)		{			if(o.height!='-1')			{				o.mc.height = sH - o.height;			}						if(o.width!='-1')			{				o.mc.width = sW - o.width;			}		}				if(o.fitToDim)		{			var dr:Number = o.mc.height/o.mc.width;			if(o.dim!='H')			{				o.mc.height = sH;				o.mc.width = o.mc.height/dr;			}else{				o.mc.width = sW;				o.mc.height = o.mc.width*dr			}		}				if(this.ref!=null)		{			var mp:Point = new Point(o.mc.x,o.mc.y)			var np:Point = this.ref.globalToLocal(mp)			o.mc.x = np.x;			o.mc.y = np.y;		}	  }	  private function _calculateValue (n:*, v:*):Number	  {		  var tempN:String;		  var tempV:String;		  		  var r:Number;		  		  tempN = n.toString();		  tempV = v.toString();		  if(tempN.indexOf ('%') > - 1)		  {			  r = parseFloat (tempN.substring (0, tempN.indexOf('%'))) / 100 * v;		  }else{			  r = n;		  }		  return r;	  }	  	  public function getXY (e : DisplayObject, hAlignment : String = 'C', vAlignment : String = 'C', xOffset:Number = 0, yOffset:Number = 0):Point	  {		var px:Point = new Point(0,0);		var p:Object = new Object();				var mc:MovieClip = new MovieClip();		mc.x = e.x;		mc.y = e.y;				p.mc = mc;		p.hAlignment = hAlignment;		p.vAlignment = vAlignment;		p.xOffset = xOffset;		p.yOffset = yOffset;		p.width = -1;		p.height = -1;		p.constr = false;		p.fitToBox = false;				this._translateElement(p);				px.x = p.mc.x;		px.y = p.mc.y;				return px;	  }	  	  public function getElementAndResize (e : DisplayObject, hAlignment : String = 'C', vAlignment : String = 'C', xOffset:* = 0, yOffset:* = 0, width:* = -1, height:* = -1, constr:Boolean = false):Object	  {		  var px:Object = new Object()		  		  var p:Object = new Object();		  p.mc = e;		  p.hAlignment = hAlignment;		  p.vAlignment = vAlignment;		  p.xOffset = xOffset;		  p.yOffset = yOffset;		  p.width = width;		  p.height = height;		  p.constr = constr;		  p.fitToBox = false;		  p.fitToDim = null;		  		  this._translateElement(p);		  		  px.x = p.mc.x;		  px.y = p.mc.y;		  px.width = p.mc.width;		  px.height = p.mc.height;		  		  return px;	  }	  	  public function getElementAndFitToDim (e : DisplayObject, hAlignment : String = 'C', vAlignment : String = 'C', xOffset:* = 0, yOffset:* = 0, dim:String='H'):Object	  {		  var px:Object = new Object()		  		  var p:Object = new Object();		  p.mc = e;		  p.hAlignment = hAlignment;		  p.vAlignment = vAlignment;		  p.xOffset = xOffset;		  p.yOffset = yOffset;		  p.width = -1;		  p.height = -1;		  p.constr = false;		  p.fitToBox = false;		  p.fitToDim = dim;	  		  this._translateElement(p);		  		  px.x = p.mc.x;		  px.y = p.mc.y;		  px.width = p.mc.width;		  px.height = p.mc.height;		  		  return px;	  }	  	  public function getElement (e : DisplayObject, hAlignment : String = 'C', vAlignment : String = 'C', xOffset:* = 0, yOffset:* = 0):Object	  {		  var px:Object = new Object()		  		  var p:Object = new Object();		  p.mc = e;		  p.hAlignment = hAlignment;		  p.vAlignment = vAlignment;		  p.xOffset = xOffset;		  p.yOffset = yOffset;		  p.width = -1;		  p.height = -1;		  p.constr = false;		  p.fitToBox = false;		  p.fitToDim = null;		  		  this._translateElement(p);		  		  px.x = p.mc.x;		  px.y = p.mc.y;		  		  return px;	  }	  	}			}